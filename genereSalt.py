import hashlib
import sys

sentence=sys.argv[1]
clear=""
finalHash=""
salt1=""


combinaison=2**len(sentence)
separator=['','*',':','=','|']

def sha1(cleartext):
	return hashlib.sha1(cleartext).hexdigest()

def permutation(tab):
	result=[]
	if len(tab)>1:
		for i in range(0,len(tab)):
			permute=tab[i]
			tab2=tab[:]
			tab2.remove(tab2[i])
						
			tmp=permutation(tab2)
			for soluce in tmp:
				result.append([permute]+soluce)
		return result
	else:
		return [tab]
		
permutationList=permutation([0,1,2])


for i in xrange(1,combinaison):
	res=[]
	byte=i
	j=combinaison/2
	z=i
	while j>=1:
		if (byte-j)>=0:
			res.append(1)
			byte=byte-j
		else:
			res.append(0)
		j=j/2
	salt2=""
	for j in xrange(0,len(res)):
		if res[j]==1:
			salt2=salt2+sentence[j].upper()
		else:
			salt2=salt2+sentence[j]
	
	sha1Tab=[salt1,salt2,clear]	
	for index in permutationList:
		for sep in separator:
			res=[]
			p1=sha1Tab[index[0]]
			p2=sha1Tab[index[1]]
			p3=sha1Tab[index[2]]
			res.append(sha1(p1)+sep+p2+sep+p3)
			res.append(p1+sep+sha1(p2)+sep+p3)
			res.append(p1+sep+p2+sep+sha1(p3))

			res.append(sha1(p1+sep+p2)+sep+p3)
			res.append(p1+sep+sha1(p2+sep+p3))
			res.append(sha1(p1)+sep+sha1(p2)+sep+sha1(p3))
			res.append(sha1(p1)+sep+p2+sep+sha1(p3))
			res.append(sha1(p1)+sep+sha1(p2)+sep+sha1(p3))
			
			res.append(p1+sep+p2+sep+p3)
			#print p1+sep+p2+sep+p3
			for z in xrange(0,len(res)):
				if sha1(res[z])==finalHash:
					print salt2
					print z
					print sep
					print str(index[0])+' /' +str(index[1])+' /' + str(index[2])

